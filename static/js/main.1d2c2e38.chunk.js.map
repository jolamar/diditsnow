{"version":3,"sources":["yes.png","no.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ikonResorts","epicResorts","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","epic","ikon","resorts","didItSnow","pending","x","toggleIkon","bind","assertThisInitialized","toggleEpic","handleTouchStart","event","touches","clientX","setState","setTimeout","localStorage","setItem","diff","Math","abs","_this2","getItem","axios","get","then","res","data","rows","filter","r","name","resort_name_short","includes","resort","key","_id","pastSnow","snow0day","sort","a","b","prevProps","prevState","snapshot","_this3","logo","require","message","react_default","createElement","className","src","alt","onTouchStart","onTouchEnd","onChange","type","id","checked","htmlFor","length","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d2c2e38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/yes.940e8ab3.png\";","module.exports = __webpack_public_path__ + \"static/media/no.24ab2011.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst ikonResorts = [\n  'Copper Mountain',\n  'Aspen / Snowmass',\n  'Steamboat',\n  'Winter Park',\n  'Eldora',\n]\n\nconst epicResorts = [\n  'Telluride',\n  'Crested Butte',\n  'Breckenridge',\n  'Vail',\n  'Arapahoe Basin',\n  'Keystone',\n  'Beaver Creek',\n]\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      epic: true,\n      ikon: true,\n      resorts: [],\n      didItSnow: false,\n      pending: false,\n      x: null\n    };\n    this.toggleIkon = this.toggleIkon.bind(this)\n    this.toggleEpic = this.toggleEpic.bind(this)\n    this.handleTouchStart = this.handleTouchStart.bind(this)\n  }\n\n  handleTouchStart(event) {\n    const x = event.touches[0].clientX\n    this.setState({x})\n  }\n\n  toggleIkon() {\n\n    if(this.state.pending) {\n      return\n    }\n    this.setState({pending:true})\n\n    setTimeout(function() {\n      this.setState({pending:false})\n    }.bind(this), 100)\n\n    const ikon = !this.state.ikon\n    this.setState({ikon})\n\n    localStorage.setItem('ikon', ikon ? 'true' : 'false')\n\n  }\n  toggleEpic(event) {\n\n    if(event && event.touches && event.touches[0]) {\n      const newX = event.touches[0].clientX\n      const diff = newX - this.state.x\n      if(Math.abs(diff) < 1) {\n        // it's not a horizontal swipe\n        return\n      }\n    }\n\n    if(this.state.pending) {\n      return\n    }\n    this.setState({pending:true})\n\n    setTimeout(function() {\n      this.setState({pending:false})\n    }.bind(this), 100)\n\n    const epic = !this.state.epic\n    this.setState({epic})\n\n    localStorage.setItem('epic', epic ? 'true' : 'false')\n  }\n\n  componentDidMount() {\n\n    if(localStorage.getItem('epic')) {\n      const epic = localStorage.getItem('epic') === 'true' ? true : false\n      const ikon = localStorage.getItem('ikon') === 'true' ? true : false\n\n      this.setState({epic, ikon})\n    }\n\n    axios.get('https://skiapp.onthesnow.com/app/widgets/resortlist?region=us&regionids=251&language=en&pagetype=skireport&direction=-1&order=stop&limit=45&offset=0&countrycode=USA&minvalue=-1&open=anystatus')\n      .then(res => {\n        this.setState({didItSnow: false})\n\n        let resorts = res.data.rows.filter(r=> {\n          const name = r.resort_name_short\n          const ikon = this.state.ikon\n          const epic = this.state.epic\n          if((ikon && ikonResorts.includes(name)) || (epic && epicResorts.includes(name))) {\n            let resort = r\n            resort.key = resort._id + \"\"\n            if(resort.pastSnow.snow0day > 0) {\n              this.setState({didItSnow: true})\n            }\n            return resort\n          }\n          return false\n        }).sort((a,b) => {\n          if(a.pastSnow.snow0day < b.pastSnow.snow0day) {\n            return 1\n          }\n\n          if(a.pastSnow.snow0day > b.pastSnow.snow0day) {\n            return -1\n          }\n\n          return 0;\n        })\n\n        this.setState({resorts})\n      })\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n\n    if(prevState.epic !== this.state.epic || prevState.ikon !== this.state.ikon) {\n      axios.get('https://skiapp.onthesnow.com/app/widgets/resortlist?region=us&regionids=251&language=en&pagetype=skireport&direction=-1&order=stop&limit=45&offset=0&countrycode=USA&minvalue=-1&open=anystatus')\n        .then(res => {\n          this.setState({didItSnow: false})\n\n          let resorts = res.data.rows.filter(r=> {\n            const name = r.resort_name_short\n            const ikon = this.state.ikon\n            const epic = this.state.epic\n            if((ikon && ikonResorts.includes(name)) || (epic && epicResorts.includes(name))) {\n              let resort = r\n              resort.key = resort._id + \"\"\n              if(resort.pastSnow.snow0day > 0) {\n                this.setState({didItSnow: true})\n              }\n              return resort\n            }\n            return false\n          }).sort((a,b) => {\n            if(a.pastSnow.snow0day < b.pastSnow.snow0day) {\n              return 1\n            }\n\n            if(a.pastSnow.snow0day > b.pastSnow.snow0day) {\n              return -1\n            }\n\n            return 0;\n          })\n          this.setState({resorts})\n        })\n    }\n  }\n\n\n\n  render() {\n    const logo = this.state.didItSnow\n      ? require('./yes.png')\n      : require('./no.png')\n\n    const message = this.state.didItSnow ? \"It snowed! :D\" : \"It didn't snow :(\"\n\n    const ikon = this.state.ikon\n    const epic = this.state.epic\n    const resorts = this.state.resorts\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>{message}</p>\n          <div className=\"toggles\">\n            <div className=\"big\">Epic pass</div>\n            <div onTouchStart={this.handleTouchStart} onTouchEnd={this.toggleEpic} className=\"toggle-border\">\n              <input onChange={this.toggleEpic} type=\"checkbox\" id=\"epic\" checked={epic}/>\n              <label htmlFor=\"epic\">\n                <div className=\"handle\"></div>\n              </label>\n            </div>\n            <div className=\"big\">Ikon pass</div>\n            <div onTouchStart={this.handleTouchStart} onTouchEnd={this.toggleIkon} className=\"toggle-border\">\n              <input onChange={this.toggleIkon} type=\"checkbox\" id=\"ikon\" checked={ikon} />\n              <label htmlFor=\"ikon\">\n                <div className=\"handle\"></div>\n              </label>\n            </div>\n          </div>\n          {this.state.resorts.length === 0 && <p>Select a ski pass.</p>}\n\n          <ul className=\"plain-list\">\n            {resorts.map(item => <li key={item._id} className=\"resort\">\n              <div className=\"resort-name\">{item.resort_name_short}</div>\n              <div className=\"resort-inches\">{item.pastSnow.snow0day}\"</div>\n            </li>)}\n          </ul>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}